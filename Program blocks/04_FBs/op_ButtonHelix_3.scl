FUNCTION_BLOCK "op_ButtonHelix_3"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      SEMAFOR_ZELENA : "udtDigitalValve";
      SEMAFOR_RUMENA : "udtDigitalValve";
      SEMAFOR_RDECA : "udtDigitalValve";
      VKLOP_VIBRATORJA : "udtMotor";
      VKLOP_M_TRACNEGA_TRANS_NOGIC : "udtMotor";
   END_VAR

   VAR RETAIN
      CurrentStep { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      PhaseStatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // // 0=IDLE, 5=RUNNING, 6=HOLD
      AlarmPresent { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      InitPosition { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
   END_VAR
   VAR 
      IEC_TimerOnDly_1 {InstructionName := 'TONR_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TONR_TIME;
      IEC_TimerOnDly_2 {InstructionName := 'TONR_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TONR_TIME;
      IEC_TimerOnDly_3 {InstructionName := 'TONR_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TONR_TIME;
      IEC_TimerOnDly_4 {InstructionName := 'TONR_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TONR_TIME;
      IEC_TimerOnDly_5 {InstructionName := 'TONR_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TONR_TIME;
      IEC_TimerOnDly_6 {InstructionName := 'TONR_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TONR_TIME;
      IEC_TimerOnDly_7 {InstructionName := 'TONR_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TONR_TIME;
      IEC_TimerOnDly_8 {InstructionName := 'TONR_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TONR_TIME;
      IEC_TimerOnDly_9 {InstructionName := 'TONR_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TONR_TIME;
      IEC_TimerOnDly_10 {InstructionName := 'TONR_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TONR_TIME;
      IEC_TimerOnDly_ET_1 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Time;
      IEC_TimerOnDly_ET_2 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Time;
      IEC_TimerOnDly_ET_3 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Time;
      IEC_TimerOnDly_ET_4 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Time;
      IEC_TimerOnDly_ET_5 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Time;
      IEC_TimerOnDly_ET_6 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Time;
      IEC_TimerOnDly_ET_7 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Time;
      IEC_TimerOnDly_ET_8 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Time;
      IEC_TimerOnDly_ET_9 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Time;
      IEC_TimerOnDly_ET_10 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Time;
      IEC_TimerOnDly_DN_1 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      IEC_TimerOnDly_DN_2 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      IEC_TimerOnDly_DN_3 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      IEC_TimerOnDly_DN_4 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      IEC_TimerOnDly_DN_5 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      IEC_TimerOnDly_DN_6 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      IEC_TimerOnDly_DN_7 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      IEC_TimerOnDly_DN_8 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      IEC_TimerOnDly_DN_9 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      IEC_TimerOnDly_DN_10 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      Mode : Int;
      ModePrev : Int;
   END_VAR
   VAR RETAIN
      CurrUserN_LEN : Int;
   END_VAR
   VAR 
      HMICurrScreenOLD : Byte;
      AlarmPresentOLD { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      InitPositionOLD { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
   END_VAR
   VAR RETAIN
      DlyTimeToStart_TRAK_VIJAC { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'True'} : Int := 7;
      DlyTimeToStop_TRAK_VIJAC { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'True'} : Int := 20;
      DlyTimeToStart_VIBRO { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'True'} : Int := 30;
      DlyTimeToStop_VIBRO { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'True'} : Int := 10;
   END_VAR
   VAR 
      UnitRegimeOLD { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      EndTransportNogic { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      Count_M_TRACNEGA_TRANS_NOGIC { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt;
   END_VAR
   VAR RETAIN
      DlyTimeForAlarmAddNewHelix { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UInt;
   END_VAR
   VAR 
      Count_M_TRACNEGA_TRANS_NOGIC_OLD { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt;
   END_VAR

   VAR_TEMP 
      i : Int;
      j : Int;
      i1 : Int;
      i2 : Int;
      i3 : Int;
      i4 : Int;
      i5 : Int;
      i6 : Int;
      i7 : Int;
      i8 : Int;
      i9 : Int;
      i10 : Int;
   END_VAR

   VAR CONSTANT 
      PLIIndex : Int := 3;
   END_VAR


BEGIN
	// Initialize variables
	#i := 0;
	#j := 0;
	#CurrUserN_LEN      := LEN("dbHMIUser".CurrentUsername); // if 0 user not logged IN, if > 0 user is logged IN
	
	#i1   := #PLIIndex;                          // 1
	#i2   := #PLIIndex + "MaxPLITimersIndex";    // 5
	#i3   := #PLIIndex + 2*"MaxPLITimersIndex";  // 9
	#i4   := #PLIIndex + 3*"MaxPLITimersIndex";  // 13
	#i5   := #PLIIndex + 4*"MaxPLITimersIndex";  // 17
	#i6   := #PLIIndex + 5*"MaxPLITimersIndex";  // 21
	#i7   := #PLIIndex + 6*"MaxPLITimersIndex";  // 25
	#i8   := #PLIIndex + 7*"MaxPLITimersIndex";  // 29
	#i9   := #PLIIndex + 8*"MaxPLITimersIndex";  // 33
	#i10  := #PLIIndex + 9*"MaxPLITimersIndex";  // 37
	
	// Check alarms
	#AlarmPresent := 0;
	// 20210517_PRA FOR #i := 1 TO 32 DO Alarm [8] is a warning and light on YELOW light, not red light as others PLI alarms (see fcUtilities)
	FOR #i := 1 TO 7 DO
	  IF "dbAlarms".PLI[#PLIIndex, #i] THEN
	    #AlarmPresent := 1;
	  END_IF;
	  IF "AlarmAck" THEN
	    "dbAlarms".PLI[#PLIIndex, #i] := 0;
	  END_IF;
	END_FOR;
	
	// Timers section
	#IEC_TimerOnDly_DN_1 := 0;
	#IEC_TimerOnDly_1(IN := False,
	                  R := False,
	                  PT := T#10s,
	                  Q => #IEC_TimerOnDly_DN_1,
	                  ET => #IEC_TimerOnDly_ET_1);
	
	(*
	// Alarms reset timer
	#IEC_TimerOnDly_4_DN := 0;
	#IEC_TimerOnDly_4(IN := "HS_RESET",
	                  R := NOT "HS_RESET",
	                  PT := T#2s,
	                  Q => #IEC_TimerOnDly_4_DN,
	                  ET => #IEC_TimerOnDly_4_ET);
	IF "HS_RESET" THEN
	    "dbDigitalValves".XS_FC_RESET.AutoON := true;
	END_IF;
	*)
	
	// PHASE STATUS
	#PhaseStatus := 0;
	IF #CurrentStep >= 1 AND "dbUnit".Unit[1].StartStop THEN
	  #PhaseStatus := 5;
	END_IF;
	IF #CurrentStep >= 1 AND (NOT "dbUnit".Unit[1].StartStop OR NOT "dbDigitalSensors".ZAUSTAVITEV_V_SILI_NI_AKTIVIRANA.InputF) THEN
	  #CurrentStep := 0; // // Operation is stopped
	  #PhaseStatus := 7;
	END_IF;
	IF #CurrentStep >= 1 AND #AlarmPresent THEN
	  #PhaseStatus := 6;
	END_IF;
	
	// Stop unit if regime is changed
	IF "dbUnit".Unit[1].Regime <> #UnitRegimeOLD THEN
	  "dbUnit".Unit[1].StartStop := False;
	END_IF;
	
	CASE #CurrentStep OF
	  0: // Sequence permissives
	    // STOP phases
	    "ph_Helix_1_DB".#StartCmd         := False;
	    "ph_LegsShifter_2_DB".#StartCmd   := False;
	
	    "dbHMIUser".CurrMachineStep := 'Pritisni START';
	
	    IF ("dbUnit".Unit[1].Regime=0 AND "dbUnit".Unit[1].StartStop) THEN // Local  mode
	      IF #PhaseStatus=0 THEN
	        "dbHMIUser".CurrMachineStep := 'Zagon naprave v teku';
	        #CurrentStep := 3;
	      END_IF;
	    END_IF;
	
	  3: // Check initial positions
	    "dbHMIUser".CurrMachineStep := 'Naprava v alarmu';
	
	    IF NOT "dbUnit".Unit[1].AlarmsPresent THEN
	      #CurrentStep := 5;
	    END_IF;
	
	  5: // Init variables
	    "dbTimers".Num[#i1].EE    := False;
	    "dbTimers".Num[#i2].EE    := False;
	    "dbTimers".Num[#i3].EE    := False;
	    "dbTimers".Num[#i4].EE    := False;
	    "dbTimers".Num[#i5].EE    := False;
	    "dbTimers".Num[#i6].EE    := False;
	    "dbTimers".Num[#i7].EE    := False;
	    "dbTimers".Num[#i8].EE    := False;
	    "dbTimers".Num[#i9].EE    := False;
	    "dbTimers".Num[#i10].EE   := False;
	
	    #EndTransportNogic := False;
	    #Count_M_TRACNEGA_TRANS_NOGIC := 0;
	    #Count_M_TRACNEGA_TRANS_NOGIC_OLD := #Count_M_TRACNEGA_TRANS_NOGIC;
	    
	    // "ph_LegsShifter_2_DB"."Mode" := 1; // Start fill slide LEVO, then start fill slide DESNO to the top
	    "dbHMIUser".CurrMachineStep := 'Transport nogic do vijacnega dela v teku';
	
	    #CurrentStep := 10;
	
	  10: // Move legs with VKLOP_M_TRAKA_VIJACNIKA to VIBRATOR
	    "ph_Helix_1_DB".#StartCmd         := True;
	    IF ("ph_Helix_1_DB".CurrentStep>5) THEN // Wait to run #VKLOP_M_TRAKA_VIJACNIKA till legs reach TRAK_LEVO1, TRAK_LEVO2, TRAK_DESNO1, TRAK_DESNO2 
	      "ph_LegsShifter_2_DB".#StartCmd := True;
	    END_IF;
	
	// START/STOP TRAKA_VIJACNIKA
	REGION START/STOP TRAKA ZA TRANSPORT NOGIC V VIBRATOR
	    // "dbDigitalSensors".NOGICE_V_VIBRATORJU.InputF=1 nogice niso prisotne
	    // 20210512_PRA "dbTimers".Num[#i1].EE  := "dbDigitalSensors".NOGICE_V_VIBRATORJU.InputF;
	    "dbTimers".Num[#i1].EE  := "dbDigitalSensors".NOGICE_V_VIBRATORJU.InputF;
	    "dbTimers".Num[#i1].PRE := #DlyTimeToStart_TRAK_VIJAC;
	
	    IF ("dbTimers".Num[#i1].EE AND "dbTimers".Num[#i1].DN) OR "dbTimers".Num[#i2].TT THEN
	      #VKLOP_M_TRACNEGA_TRANS_NOGIC.AutoON := True; // Start, če ni prisotnih nogic v vibratorju in iztek časovnika. Stop po preteku časa ali prisotnosti nogic v vibratorju.
	      "dbTimers".Num[#i2].EE  := True;
	      "dbTimers".Num[#i2].PRE := #DlyTimeToStop_TRAK_VIJAC;
	    END_IF;
	    IF "dbTimers".Num[#i2].EE AND "dbTimers".Num[#i2].DN THEN
	      "dbTimers".Num[#i2].EE  := False;
	      "dbTimers".Num[#i2].DN  := False;
	
	      #EndTransportNogic := True;
	      "dbTimers".Num[#i1].ACC  := 0;
	      #Count_M_TRACNEGA_TRANS_NOGIC := #Count_M_TRACNEGA_TRANS_NOGIC + 1;
	    END_IF;
	  
	    IF (#Count_M_TRACNEGA_TRANS_NOGIC_OLD <> #Count_M_TRACNEGA_TRANS_NOGIC) THEN
	        #Count_M_TRACNEGA_TRANS_NOGIC := #Count_M_TRACNEGA_TRANS_NOGIC + 1;
	    END_IF;
	    #Count_M_TRACNEGA_TRANS_NOGIC_OLD := #Count_M_TRACNEGA_TRANS_NOGIC;
	END_REGION
	
	REGION START/STOP VIBRATORJA
	    // 20210512_PRA "dbTimers".Num[#i3].EE  := NOT "dbDigitalSensors".FOTOCELICA_VSTOP_DRCA_NOGIC.InputF;
	    "dbTimers".Num[#i3].EE  := NOT "dbDigitalSensors".FOTOCELICA_VSTOP_DRCA_NOGIC.InputF OR #EndTransportNogic;
	    "dbTimers".Num[#i3].PRE := #DlyTimeToStart_VIBRO;
	
	    IF ("dbTimers".Num[#i3].EE AND "dbTimers".Num[#i3].DN) OR "dbTimers".Num[#i4].TT THEN // zakasnitev delovanja
	      #VKLOP_VIBRATORJA.AutoON := True;
	
	      "dbTimers".Num[#i4].EE  := True;
	      "dbTimers".Num[#i4].PRE := #DlyTimeToStop_VIBRO;
	    END_IF;
	    IF "dbTimers".Num[#i4].EE AND "dbTimers".Num[#i4].DN THEN // zakasnitev mirovanja
	      "dbTimers".Num[#i4].EE  := False;
	      "dbTimers".Num[#i4].DN  := False;
	      #EndTransportNogic := False;
	
	      "dbTimers".Num[#i3].ACC  := 0; 
	    END_IF;
	END_REGION
	
	END_CASE;
	
	// ALARMS SECTION
	// Alarm 1
	// ZAUSTAVITEV_V_SILI_NI_AKTIVIRANA
	IF ("dbSystemAlarms".SysAlm[01]) THEN
	  "dbAlarms".PLI[#PLIIndex, 1] := 1;
	END_IF;
	
	// Alarm 2
	// PRISOTNOST_ZRAKA_NA_NAPRAVI
	IF ("dbSystemAlarms".SysAlm[02]) THEN
	  "dbAlarms".PLI[#PLIIndex, 2] := 1;
	END_IF;
	
	// Alarm 3
	// FOTO_ZAVESA_KANAL_1
	IF ("dbSystemAlarms".SysAlm[03]) THEN
	  ; // "dbAlarms".PLI[#PLIIndex, 3] := 1;
	END_IF;
	
	// Alarm 4
	// FOTO_ZAVESA_KANAL_2
	IF ("dbSystemAlarms".SysAlm[04]) THEN
	  ; // "dbAlarms".PLI[#PLIIndex, 4] := 1;
	END_IF;
	
	// Alarm 5
	IF (#VKLOP_M_TRACNEGA_TRANS_NOGIC.Alarm) THEN
	  "dbAlarms".PLI[#PLIIndex, 5] := 1;
	END_IF;
	
	// Alarm 6
	IF (#VKLOP_VIBRATORJA.Alarm) THEN
	  "dbAlarms".PLI[#PLIIndex, 6] := 1;
	END_IF;
	
	// Alarm 7
	// Prisoten eden od alarmov
	IF (#CurrentStep = 3) AND ("dbUnit".Unit[1].AlarmsPresent) THEN
	  "dbAlarms".PLI[#PLIIndex, 7] := 1;
	END_IF;
	
	// Warning 8 - Show yellow light - see fcUtilities
	// Dodaj nogice v vstopni zalogovnik - 3x(#Count_M_TRACNEGA_TRANS_NOGIC=7) ponovi trak transport in začne teči alarm timer
	"dbTimers".Num[#i5].EE  := NOT "dbDigitalSensors".FOTOCELICA_TRANSPORTA_NOGIC.InputF AND #Count_M_TRACNEGA_TRANS_NOGIC>=6 AND #DlyTimeForAlarmAddNewHelix>0;
	"dbTimers".Num[#i5].PRE := #DlyTimeForAlarmAddNewHelix;
	IF (#CurrentStep = 10) AND ("dbTimers".Num[#i5].EE AND "dbTimers".Num[#i5].DN) THEN
	  #Count_M_TRACNEGA_TRANS_NOGIC := 0;
	  "dbTimers".Num[#i5].EE := False;
	  "dbAlarms".PLI[#PLIIndex, 8] := 1;
	END_IF;
	
	
	// Alarms in running state
	IF #PhaseStatus = 5 THEN
	  // Alarms action
	  IF (NOT #AlarmPresentOLD AND #AlarmPresent) OR (NOT #InitPositionOLD AND #InitPosition) THEN
	    ; // #CurrentStep := 6;
	  END_IF;
	END_IF;
	
	// OLD SCAN
	#AlarmPresentOLD        := #AlarmPresent;
	#InitPositionOLD        := #InitPosition;
	#HMICurrScreenOLD       := "dbHMIUser".HMICurrScreen;
	#UnitRegimeOLD          := "dbUnit".Unit[1].Regime;
END_FUNCTION_BLOCK

